/*class Solution {   Tc-O(2^n*k) Sc - (k + rec. stack) // k is the avg. len of comb.
public:
    set<vector<int>> temp;
    int n;
    void solve(int i, vector<int>& ds, int target,vector<int>& nums) {
        if (i >= n) {
            if (target == 0) {
                temp.insert(ds);
            }
            return;
        }

        ds.push_back(nums[i]);
        solve(i+1,ds,target-nums[i],nums);
        ds.pop_back();

        solve(i+1,ds,target,nums);
    }
    vector<vector<int>> combinationSum2(vector<int>& nums, int target) {
        vector<vector<int>> ans;
        vector<int> ds;
        n = nums.size();
        solve(0, ds, target,nums);

        for(auto x:temp){
            ans.push_back(x);
        }
        return ans;
    }
};*/

class Solution {   //Tc -O(2^n * k)+ O(nlogn)     SC - O(n*k)   k is the avg. len of comb.  x = no.  of comb.
public:
    vector<vector<int>> ans;
    int n;
    void solve(int idx, vector<int>& ds, int target, vector<int>& nums) {
        if (target == 0) {
            ans.push_back(ds);
            return ;
        }

        for (int i = idx; i < n; i++) {
            if (i > idx && nums[i] == nums[i - 1]) {
                continue;
            }
            if (target >= nums[i]) {
                ds.push_back(nums[i]);
                solve(i + 1, ds, target - nums[i], nums);
                ds.pop_back();
            }
            else{
                break;
            }
        }
    }
    vector<vector<int>> combinationSum2(vector<int>& nums, int target) {
        vector<int> ds;
        n = nums.size();
        sort(nums.begin(), nums.end());
        solve(0, ds, target, nums);

        return ans;
    }
};
