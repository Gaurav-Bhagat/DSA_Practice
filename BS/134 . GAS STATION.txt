//BRUTE FORCE......O(N x N)


class Solution {
public:
    bool possible(int ind , vector<int>& gas, vector<int>& cost , int n)
    {
        int x = ind;
        int g=0;
        for(int i = x ;i<n;i++)
        {
            g+=gas[i];
            if(g>=cost[i])
            {
                g = g - cost[i];
            }
            else{
                return false;
            }
        }
        for(int i = 0 ;i<=x;i++)
        {
            g+=gas[i];
            if(g>=cost[i]){
                g-=cost[i];
            }
            else
                return false;
        }
        return true;
    }
    int canCompleteCircuit(vector<int>& gas, vector<int>& cost) {
        int i = 0;
        int n = gas.size();
        int g = 0;
        int index = 0;
        for(i = 0;i<n;i++)
        {
            if(possible(i,gas,cost,n))
            {
                return i;
            }
        }
        return -1;
    }
};


///Greedy approach

class Solution {  //O(N)...
public:
    int canCompleteCircuit(vector<int>& gas, vector<int>& cost) {
        int n = gas.size();
        int index = 0;
        int total = 0;
        if(accumulate(gas.begin() , gas.end(),0) < accumulate(cost.begin() ,cost.end(),0)){
            return -1;
        }
        for(int i = 0;i<n;i++){
           total = total+gas[i]-cost[i];

            if(total<0){
                total = 0;
                index = i+1;
            }
        }
        return index;
    }
};